Stl stands for :Standard Template Library
Sets: Sets basically are based upon two things, unique and sorted .
ie they have unique entries and all the entries are stored in a sorted manner.
set<int> st;

1 unordered_set : the set which is not sorted but is unique .
MultiSet: these can have multiple same values but they are in sorted manner.

Vector : vector <int> v;
v.push_back(10); {it puts 10 in it }
v.emplace_back(2); {it also puts 2 in it , however is faster}
v.insert(v.begin(), 5); {it puts 5 at the beginning of the vector }
v.insert(v.end(), 5); {it puts 5 at the end of the vector }
vector <int >v(5,24); it creates 5 instances of 24;
vector <int>v1(v); now , this will copy the contents of v into v1
vector <int> :: iterator it = v.begin()
v.begin gives the memory address , to acess the value at the memory address , you need to put an * with the element
 example: cout<< *(it)<< " ";

vector <int>:: iterator it =v.end(); gives memory address of the position next to the last element
for (vector<int ::iterator it = v.begin (); it!=v.end (); it++){
    cout<< *it << " " ;
};
short hand method;
for(auto it = v.begin();it !=v.end();it++){
    cout<< *it << " " ;
}
Erasing :
v.erase(v.begin ()); this removes the first element of the structure
v.erase(v.begin(),v.end()); this removes all the elements of the structure
v.clear(); this also removes all the elements of the structure
v.erase(v.begin, v.begin()+3) this will remove the first and second element why so? the element to be removed , the index should be given of the next number .

Insert :
same pattern, will insert at the desired value .
v.insert(v.begin(), 5); inserts 5 at the beginning
v.insert(v.end(), 5); inserts 5 at the end
v.insert(v.begin(), 5, 5); inserts 5 five times at the beginning
v.insert(v.begin(), v1.begin(), v1.end()); inserts all the elements of v1
vector <int , int > v(2, 100); gives (100,100 )
v.insert (v.begin()+1, 2  ,10) gives where , how many and what to insert.

Pair :
pair <int , int > p1 = make_pair(1,2);
pair <int , int > p2 = make_pair(2,3);
p1.first = 1
p1.second = 2
p1.first = p2.first
p1.second = p2.second
p1 = p2
p1 = make_pair(1,2)

lists : list <int> ls;

Deque: similar to vetor and lists 
deque <int > dq ;


Stack: Lifo : last in first out rule . the time complexity for stack is o(1)
stack<int> st;
st.push(1);
st.push(2);
st.pop(); removes 2.
st.top(); after removal of two the topmost will be one 
rest of the things are same , insert , emplace and all ..

